generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime  @default(now()) @map("created_at")
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  results       Result[]

  @@map("users")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @unique
  access_token      String? @unique
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @unique
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Result {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @map("user_id")
  createdAt      DateTime @default(now()) @map("created_at")
  accuracy  String
  wpm       Int
  takenTime  String   @map("taken_time")
  errorCount Int?     @map("error_count")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("results")
}
